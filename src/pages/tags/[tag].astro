---
import type { MarkdownInstance } from 'astro';
import BlogPost from '../../components/BlogPost.astro';
import BaseLayout from '../../layouts/BaseLayout.astro';

type Tags = {
  params: { tag: string },
  props: { posts: MarkdownInstance<Record<string, any>>[] }
}[]

export async function getStaticPaths(): Promise<Tags>  {

    const allPosts = await Astro.glob('../posts/*.md');

    const uniqueTags = [...new Set(allPosts.map((post) => post.frontmatter.tags).flat())] as string[];

    return uniqueTags.map((tag) => {
      const filteredPosts = allPosts.filter((post) => post.frontmatter.tags.includes(tag));

      return {
        params: { tag },
        props: { posts: filteredPosts },
      }
    });
}

const { tag } = Astro.params;
const { posts } = Astro.props;

// const filteredPosts = posts.filter((post) => post.frontmatter.tags?.includes(tag));
---
<BaseLayout pageTitle={tag}>
  <p>Posts tagged with {tag}</p>

  <ul>
    {posts.map((post) => <BlogPost url={post.url} title={post.frontmatter.title}/>)}
  </ul>

</BaseLayout>